{"version":3,"sources":["helpers/laps.ts","components/RPMBoxPlot/RPMBoxPlot.tsx","components/RPMIncidents/RPMIncidents.tsx","components/RPMLapsBars/RPMLapsBars.tsx","components/RPMResultsGrid/RPMResultsGrid.tsx","components/RPMTabPanel/RPMTabPanel.tsx","App.tsx","index.tsx","components/RPMBoxPlot/RPMBoxPlot.module.css","components/RPMIncidents/RPMIncidents.module.css","components/RPMLapsBars/RPMLapsBars.module.css","components/RPMResultsGrid/RPMResultsGrid.module.css","components/RPMTabPanel/RPMTabPanel.module.css"],"names":["laptimeToHumanReadable","value","duration","intervalToDuration","start","end","minutes","String","seconds","padStart","Math","round","padEnd","RPMBoxPlot","data","useState","boxPlotData","setBoxPlotData","yaxis","labels","formatter","min","max","tickAmount","chartConfig","setChartConfig","useEffect","length","sortedData","sort","x","y","forEach","driver","push","floor","className","styles","options","series","type","width","RPMIncidents","setBarData","name","map","cfg","stroke","title","text","dataLabels","enabled","enabledOnSeries","xaxis","opposite","barData","lineData","fillColor","console","log","colors","Gold","Silver","Bronze","RPMLapsBars","lap_type","style","offsetX","plotOptions","bar","horizontal","grid","show","lines","tooltip","ceil","reduce","prev","curr","axisTicks","getChartConfig","valueFormatter","RPMResultsGrid","field","headerName","pinned","valueGetter","params","pos","finish_position","posCls","finish_position_in_class","starting_position","filter","columnDefs","height","rowData","RPMTabPanel","children","index","other","role","hidden","id","Box","sx","p","App","setData","React","setValue","axios","get","then","res","a11yProps","CssBaseline","Container","league_name","track_name","borderBottom","borderColor","Tabs","onChange","event","newValue","Tab","label","drivers_statistics","rootElement","document","getElementById","ReactDOM","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.fd07f13c.chunk.js","sourcesContent":["import { intervalToDuration } from \"date-fns\";\n\nexport const laptimeToHumanReadable = (value: number) => {\n  value = value / 10;\n  const duration = intervalToDuration({ start: 0, end: value });\n  return `${duration.minutes}:${String(duration.seconds).padStart(2, '0')}.${String(Math.round(value % 1000)).padEnd(4, '0')}`;\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\n\n// Helpers\nimport { laptimeToHumanReadable } from \"../../helpers/laps\";\n\n// Styles\nimport styles from \"./RPMBoxPlot.module.css\";\n\n// Props\ninterface RPMBoxPlotProps {\n  data: any[];\n}\n\nconst RPMBoxPlot: FC<RPMBoxPlotProps> = ({ data }) => {\n  const [boxPlotData, setBoxPlotData] = useState<any[]>([]);\n  const [chartConfig, setChartConfig] = useState({\n    yaxis: {\n      labels: {\n        formatter: laptimeToHumanReadable,\n      },\n      min: 880000,\n      max: 880000 + 80000,\n      tickAmount: 8,\n    },\n  });\n\n  useEffect(() => {\n    if (data.length < 1) return;\n\n    const sortedData = [...data].sort((x, y) =>\n      x[\"finish_position\"] < y[\"finish_position\"] ? -1 : 1\n    );\n\n    const boxPlotData: any[] = [];\n    sortedData.forEach((driver) => {\n      if (driver[\"best_lap\"] === null) return;\n      boxPlotData.push({\n        x: `${driver[\"finish_position\"] + 1}. ${driver[\"name\"]}`,\n        y: [\n          driver[\"best_lap\"],\n          driver[\"quartile_1_lap\"],\n          driver[\"average_lap\"],\n          driver[\"quartile_3_lap\"],\n          driver[\"worst_lap\"],\n        ],\n      });\n    });\n    setBoxPlotData([{ data: boxPlotData }]);\n\n    chartConfig.yaxis.min = Math.floor(data[0][\"best_lap\"] / 10000) * 10000;\n    chartConfig.yaxis.max = chartConfig.yaxis.min + 80000;\n\n    setChartConfig(chartConfig);\n  }, [data]);\n\n  return (\n    <div className={styles.RPMBoxPlot}>\n      {boxPlotData.length > 0 ? (\n        <Chart\n          options={chartConfig}\n          series={boxPlotData}\n          type=\"boxPlot\"\n          width=\"100%\"\n        />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default RPMBoxPlot;\n","import React, { FC, useEffect, useState } from \"react\";\n\n// Styles\nimport styles from \"./RPMIncidents.module.css\";\nimport Chart from \"react-apexcharts\";\n\n// Props\ninterface RPMIncidentsProps {\n  data: any[];\n}\n\nconst colors = {\n  Gold: \"#fff714\",\n  Silver: \"#eeeeee\",\n  Bronze: \"#ab7d00\",\n};\n\nconst RPMIncidents: FC<RPMIncidentsProps> = ({ data }) => {\n  const incProperty = \"incidents\";\n  const incPerLapProperty = \"incidents_per_lap\";\n  const [barData, setBarData] = useState<any[]>([]);\n  const [chartConfig, setChartConfig] = useState({});\n\n  const series = [\n    {\n      name: \"Website Blog\",\n      type: \"column\",\n      data: data.map((driver) => driver[\"incidents\"]),\n    },\n    {\n      name: \"Social Media\",\n      type: \"line\",\n      data: data.map((driver) => driver[\"incidents_per_lap\"]),\n    },\n  ];\n\n  const cfg = {\n    stroke: {\n      width: [0, 4],\n    },\n    title: {\n      text: \"Traffic Sources\",\n    },\n    dataLabels: {\n      enabled: true,\n      enabledOnSeries: [1],\n    },\n    labels: data.map((driver) => driver[\"name\"]),\n    xaxis: {\n      // type: 'datetime'\n    },\n    yaxis: [\n      {\n        title: {\n          text: \"Website Blog\",\n        },\n      },\n      {\n        opposite: true,\n        title: {\n          text: \"Social Media\",\n        },\n      },\n    ],\n  };\n\n  useEffect(() => {\n    if (data.length < 1) return;\n\n    const sortedData = [...data].sort((x, y) =>\n      x[incProperty] < y[incProperty] ? -1 : 1\n    );\n\n    const barData: any[] = [];\n    sortedData.forEach((driver) => {\n      barData.push({\n        x: driver[\"name\"],\n        y: driver[incProperty],\n        // @ts-ignore\n        // fillColor: colors[driver['class']]\n      });\n    });\n\n    const lineData: any[] = [];\n    sortedData.forEach((driver) => {\n      lineData.push({\n        x: driver[\"name\"],\n        y: driver[incPerLapProperty],\n        // @ts-ignore\n        // fillColor: colors[driver['class']]\n      });\n    });\n\n    setBarData([\n      { type: \"column\", data: barData },\n      { type: \"line\", data: lineData, fillColor: \"#330000\" },\n    ]);\n    console.log([{ type: \"column\", data: barData }]);\n  }, [data]);\n\n  return (\n    <div className={styles.RPMIncidents} data-testid=\"RPMIncidents\">\n      {data.length > 0 ? (\n        <Chart options={cfg} series={series} type=\"line\" width=\"100%\" />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default RPMIncidents;\n","import React, { FC, useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\n\n// Styles\nimport styles from \"./RPMLapsBars.module.css\";\nimport { laptimeToHumanReadable } from \"../../helpers/laps\";\n\n// Props\ninterface RPMLapsBarsProps {\n  data: any[];\n  lap_type?: string;\n}\n\nconst colors = {\n  Gold: \"#fff714\",\n  Silver: \"#eeeeee\",\n  Bronze: \"#ab7d00\",\n};\n\nconst RPMLapsBars: FC<RPMLapsBarsProps> = ({ data, lap_type = \"best_lap\" }) => {\n  const [barData, setBarData] = useState<any[]>([]);\n  const [chartConfig, setChartConfig] = useState({});\n\n  const getChartConfig = (data: any[]) => {\n    return {\n      dataLabels: {\n        formatter: laptimeToHumanReadable,\n        style: {\n          colors: ['#333'],\n        },\n        offsetX: 10,\n      },\n      plotOptions: {\n        bar: {\n          horizontal: true,\n        },\n        grid: {\n          show: false, // you can either change hear to disable all grids\n          xaxis: {\n            lines: {\n              show: false, //or just here to disable only x axis grids\n            },\n          },\n          yaxis: {\n            lines: {\n              show: false, //or just here to disable only y axis\n            },\n          },\n        },\n      },\n      tooltip: {\n        y: {\n          formatter: laptimeToHumanReadable,\n        },\n      },\n      xaxis: {\n        labels: {\n          formatter: laptimeToHumanReadable,\n        },\n        min: Math.floor(data[0][lap_type] / 10000) * 10000,\n        max:\n          Math.ceil(\n            data.reduce((prev, curr) =>\n              prev[lap_type] > curr[lap_type] ? prev : curr\n            )[lap_type] / 10000\n          ) * 10000,\n        tickAmount: 10,\n      },\n      yaxis: {\n        axisTicks: {\n          show: false,\n        },\n      },\n    };\n  };\n\n  useEffect(() => {\n    if (data.length < 1) return;\n\n    const sortedData = [...data].sort((x, y) =>\n      x[lap_type] < y[lap_type] ? -1 : 1\n    );\n\n    const barData: any[] = [];\n    sortedData.forEach((driver) => {\n      if (driver[lap_type] === null || driver[lap_type] === -1) return;\n      barData.push({\n        x: driver[\"name\"],\n        y: driver[lap_type],\n        // @ts-ignore\n        fillColor: colors[driver[\"class\"]],\n      });\n    });\n    setChartConfig(getChartConfig(data));\n    setBarData([\n      {\n        name: \"Best lap\",\n        data: barData,\n        tooltip: { valueFormatter: laptimeToHumanReadable },\n      },\n    ]);\n  }, [data]);\n\n  return (\n    <div className={styles.RPMLapsBars} data-testid=\"RPMLapsBars\">\n      {data.length > 0 ? (\n        <Chart options={chartConfig} series={barData} type=\"bar\" width=\"100%\" />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default RPMLapsBars;\n","import React, { FC, useState } from \"react\";\n\nimport { AgGridReact } from \"ag-grid-react\";\n\n// Styles\nimport styles from \"./RPMResultsGrid.module.css\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport { laptimeToHumanReadable } from \"../../helpers/laps\";\n\n// Props\ninterface RPMResultsGridProps {\n  data: any[];\n}\n\nconst RPMResultsGrid: FC<RPMResultsGridProps> = ({ data }) => {\n  const [columnDefs] = useState([\n    {\n      field: \"finish_position\",\n      type: 'numericColumn',\n      headerName: \"#\",\n      width: 30,\n      pinned: 'left',\n      valueGetter: (params: any) => {\n        let pos = params.data.finish_position + 1;\n\n        if (pos === 1) {\n          pos = '🏆';\n        }\n        return pos;\n    }},\n    {\n      field: \"name (class #)\",\n      pinned: 'left',\n      valueGetter: (params: any) => {\n        let posCls = params.data.finish_position_in_class + 1;\n\n        if (posCls === 1) {\n          posCls = '🏆';\n        }\n\n        return `${params.data.name} (${posCls})`;\n      },\n    },\n    {\n      field: \"best_lap\",\n      type: 'numericColumn',\n      headerName: \"Best lap\",\n      valueFormatter: (params: any) => {\n        return laptimeToHumanReadable(params.value);\n      },\n    },\n    {\n      field: \"best_qual_lap_time\",\n      type: 'numericColumn',\n      headerName: \"Qualy\",\n      valueFormatter: (params: any) => {\n        return laptimeToHumanReadable(params.value);\n      },\n    },\n    {\n      field: \"average_lap\",\n      type: 'numericColumn',\n      headerName: \"Avg lap\",\n      valueFormatter: (params: any) => {\n        return laptimeToHumanReadable(params.value);\n      },\n    },\n    { field: \"incidents\", type: 'numericColumn' },\n    {\n      headerName: \"Positions gained\",\n      type: 'numericColumn',\n      valueGetter: (params: any) =>\n        params.data.starting_position - params.data.finish_position,\n    },\n    { field: \"laps_complete\", type: 'numericColumn', headerName: \"Laps completed\" },\n    { field: \"class\", filter: true },\n  ]);\n\n  return (\n    <div className={styles.RPMResultsGrid}>\n      <div className=\"ag-theme-alpine\" style={{ height: 600, width: \"100%\" }}>\n        <AgGridReact rowData={data} columnDefs={columnDefs}></AgGridReact>\n      </div>\n    </div>\n  );\n};\n\nexport default RPMResultsGrid;\n","import React, { FC } from \"react\";\nimport { Box, Tab, Tabs, Typography } from \"@mui/material\";\n\n// Styles\nimport styles from \"./RPMTabPanel.module.css\";\nimport RPMResultsGrid from \"../RPMResultsGrid/RPMResultsGrid\";\nimport RPMBoxPlot from \"../RPMBoxPlot/RPMBoxPlot\";\n\n// Props\ninterface RPMTabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst RPMTabPanel: FC<RPMTabPanelProps> = ({\n  children,\n  value,\n  index,\n  ...other\n}) => {\n  return (\n    <div className={styles.RPMTabPanel} data-testid=\"RPMTabPanel\">\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n      </div>\n    </div>\n  );\n};\n\nexport default RPMTabPanel;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport { Box, Container, CssBaseline, Tab, Tabs } from \"@mui/material\";\n\n// Components\nimport RPMBoxPlot from \"./components/RPMBoxPlot/RPMBoxPlot\";\nimport RPMIncidents from \"./components/RPMIncidents/RPMIncidents\";\nimport RPMLapsBars from \"./components/RPMLapsBars/RPMLapsBars\";\nimport RPMResultsGrid from \"./components/RPMResultsGrid/RPMResultsGrid\";\nimport RPMTabPanel from \"./components/RPMTabPanel/RPMTabPanel\";\n\nconst App = () => {\n  const [data, setData] = useState<any>({});\n  const [value, setValue] = React.useState(0);\n\n  useEffect(() => {\n    axios.get(\"data.json\").then((res) => setData(res.data));\n  }, []);\n\n  const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n    setValue(newValue);\n  };\n\n  const a11yProps = (index: number) => {\n    return {\n      id: `simple-tab-${index}`,\n      \"aria-controls\": `simple-tabpanel-${index}`,\n    };\n  };\n\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <Container sx={{ height: \"100%\" }}>\n        <h2>\n          {data.league_name} - {data.track_name}\n        </h2>\n        <Box sx={{ width: \"100%\", height: \"100%\" }}>\n          <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n            <Tabs\n              value={value}\n              onChange={handleTabChange}\n              aria-label=\"Race results tabs\"\n            >\n              <Tab label=\"Results\" {...a11yProps(0)} />\n              <Tab label=\"Qualy laps\" {...a11yProps(1)} />\n              <Tab label=\"Race laps\" {...a11yProps(2)} />\n              <Tab label=\"Lap times distribution\" {...a11yProps(3)} />\n              <Tab label=\"Incidents\" {...a11yProps(4)} />\n            </Tabs>\n          </Box>\n          <RPMTabPanel value={value} index={0}>\n            <RPMResultsGrid data={data.drivers_statistics} />\n          </RPMTabPanel>\n          <RPMTabPanel value={value} index={1}>\n            <RPMLapsBars\n              data={data.drivers_statistics}\n              lap_type={\"best_qual_lap_time\"}\n            />\n          </RPMTabPanel>\n          <RPMTabPanel value={value} index={2}>\n            <RPMLapsBars data={data.drivers_statistics} />\n          </RPMTabPanel>\n          <RPMTabPanel value={value} index={3}>\n            <RPMBoxPlot data={data.drivers_statistics} />\n          </RPMTabPanel>\n          <RPMTabPanel value={value} index={4}>\n            <RPMIncidents data={data.drivers_statistics} />\n          </RPMTabPanel>\n        </Box>\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// Components\nimport App from \"./App\";\n\n// Global styles\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMBoxPlot\":\"RPMBoxPlot_RPMBoxPlot__uN3Ca\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMIncidents\":\"RPMIncidents_RPMIncidents__4P6eV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMLapsBars\":\"RPMLapsBars_RPMLapsBars__2inxn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMResultsGrid\":\"RPMResultsGrid_RPMResultsGrid__317WZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMTabPanel\":\"RPMTabPanel_RPMTabPanel__1RPKo\"};"],"sourceRoot":""}