{"version":3,"sources":["components/RPMTabPanel/RPMTabPanel.tsx","helpers/laps.ts","components/RPMResultsGrid/RPMResultsGrid.tsx","components/RPMLapsBars/RPMLapsBars.tsx","components/RPMBoxPlot/RPMBoxPlot.tsx","components/RPMIncidents/RPMIncidents.tsx","components/RPMRace/RPMRace.tsx","App.tsx","index.tsx","components/RPMRace/RPMRace.module.css","components/RPMTabPanel/RPMTabPanel.module.css","components/RPMResultsGrid/RPMResultsGrid.module.css","components/RPMLapsBars/RPMLapsBars.module.css","components/RPMBoxPlot/RPMBoxPlot.module.css","components/RPMIncidents/RPMIncidents.module.css"],"names":["RPMTabPanel","children","value","index","other","className","styles","role","hidden","id","Box","sx","p","laptimeToHumanReadable","duration","intervalToDuration","start","end","minutes","String","seconds","padStart","Math","round","padEnd","RPMResultsGrid","data","useState","field","type","headerName","width","pinned","valueGetter","params","pos","finish_position","posCls","finish_position_in_class","name","valueFormatter","starting_position","filter","columnDefs","style","height","rowData","colors","Gold","Silver","Bronze","RPMLapsBars","lap_type","barData","setBarData","chartConfig","setChartConfig","useEffect","length","sortedData","sort","x","y","forEach","driver","push","fillColor","dataLabels","formatter","offsetX","plotOptions","bar","horizontal","grid","show","xaxis","lines","yaxis","tooltip","labels","min","floor","max","ceil","reduce","prev","curr","tickAmount","axisTicks","getChartConfig","options","series","RPMBoxPlot","boxPlotData","setBoxPlotData","RPMIncidents","map","cfg","stroke","title","text","enabled","enabledOnSeries","opposite","lineData","console","log","RPMRace","React","setValue","a11yProps","track_name","borderBottom","borderColor","Tabs","onChange","event","newValue","Tab","label","drivers_statistics","App","racesData","setRacesData","currentRace","setCurrentRace","setData","anchorEl","setAnchorEl","open","Boolean","axios","get","then","res","CssBaseline","AppBar","position","Toolbar","IconButton","size","edge","color","mr","onClick","currentTarget","Icon","Menu","onClose","MenuListProps","menuItems","races","race","sub","MenuItem","subsession_id","race_num","getMenu","Typography","variant","component","flexGrow","Container","rootElement","document","getElementById","ReactDOM","render","StrictMode","module","exports"],"mappings":"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","file":"static/js/main.4e368053.chunk.js","sourcesContent":["import React, { FC } from \"react\";\nimport { Box, Tab, Tabs, Typography } from \"@mui/material\";\n\n// Styles\nimport styles from \"./RPMTabPanel.module.css\";\nimport RPMResultsGrid from \"../RPMResultsGrid/RPMResultsGrid\";\nimport RPMBoxPlot from \"../RPMBoxPlot/RPMBoxPlot\";\n\n// Props\ninterface RPMTabPanelProps {\n  children?: React.ReactNode;\n  index: number;\n  value: number;\n}\n\nconst RPMTabPanel: FC<RPMTabPanelProps> = ({\n  children,\n  value,\n  index,\n  ...other\n}) => {\n  return (\n    <div className={styles.RPMTabPanel} data-testid=\"RPMTabPanel\">\n      <div\n        role=\"tabpanel\"\n        hidden={value !== index}\n        id={`simple-tabpanel-${index}`}\n        aria-labelledby={`simple-tab-${index}`}\n        {...other}\n      >\n        {value === index && <Box sx={{ p: 3 }}>{children}</Box>}\n      </div>\n    </div>\n  );\n};\n\nexport default RPMTabPanel;\n","import { intervalToDuration } from \"date-fns\";\n\nexport const laptimeToHumanReadable = (value: number) => {\n  value = value / 10;\n  const duration = intervalToDuration({ start: 0, end: value });\n  return `${duration.minutes}:${String(duration.seconds).padStart(2, '0')}.${String(Math.round(value % 1000)).padEnd(4, '0')}`;\n};\n","import React, { FC, useState } from \"react\";\n\nimport { AgGridReact } from \"ag-grid-react\";\n\n// Styles\nimport styles from \"./RPMResultsGrid.module.css\";\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport { laptimeToHumanReadable } from \"../../helpers/laps\";\n\n// Props\ninterface RPMResultsGridProps {\n  data: any[];\n}\n\nconst RPMResultsGrid: FC<RPMResultsGridProps> = ({ data }) => {\n  const [columnDefs] = useState([\n    {\n      field: \"finish_position\",\n      type: 'numericColumn',\n      headerName: \"#\",\n      width: 30,\n      pinned: 'left',\n      valueGetter: (params: any) => {\n        let pos = params.data.finish_position + 1;\n\n        if (pos === 1) {\n          pos = '🏆';\n        }\n        return pos;\n    }},\n    {\n      field: \"name (class #)\",\n      pinned: 'left',\n      valueGetter: (params: any) => {\n        let posCls = params.data.finish_position_in_class + 1;\n\n        if (posCls === 1) {\n          posCls = '🏆';\n        }\n\n        return `${params.data.name} (${posCls})`;\n      },\n    },\n    {\n      field: \"best_lap\",\n      type: 'numericColumn',\n      headerName: \"Best lap\",\n      valueFormatter: (params: any) => {\n        return laptimeToHumanReadable(params.value);\n      },\n    },\n    {\n      field: \"best_qual_lap_time\",\n      type: 'numericColumn',\n      headerName: \"Qualy\",\n      valueFormatter: (params: any) => {\n        return laptimeToHumanReadable(params.value);\n      },\n    },\n    {\n      field: \"average_lap\",\n      type: 'numericColumn',\n      headerName: \"Avg lap\",\n      valueFormatter: (params: any) => {\n        return laptimeToHumanReadable(params.value);\n      },\n    },\n    { field: \"incidents\", type: 'numericColumn' },\n    {\n      headerName: \"Positions gained\",\n      type: 'numericColumn',\n      valueGetter: (params: any) =>\n        params.data.starting_position - params.data.finish_position,\n    },\n    { field: \"laps_complete\", type: 'numericColumn', headerName: \"Laps completed\" },\n    { field: \"class\", filter: true },\n  ]);\n\n  return (\n    <div className={styles.RPMResultsGrid}>\n      <div className=\"ag-theme-alpine\" style={{ height: 600, width: \"100%\" }}>\n        <AgGridReact rowData={data} columnDefs={columnDefs}></AgGridReact>\n      </div>\n    </div>\n  );\n};\n\nexport default RPMResultsGrid;\n","import React, { FC, useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\n\n// Styles\nimport styles from \"./RPMLapsBars.module.css\";\nimport { laptimeToHumanReadable } from \"../../helpers/laps\";\n\n// Props\ninterface RPMLapsBarsProps {\n  data: any[];\n  lap_type?: string;\n}\n\nconst colors = {\n  Gold: \"#fff714\",\n  Silver: \"#eeeeee\",\n  Bronze: \"#ab7d00\",\n};\n\nconst RPMLapsBars: FC<RPMLapsBarsProps> = ({ data, lap_type = \"best_lap\" }) => {\n  const [barData, setBarData] = useState<any[]>([]);\n  const [chartConfig, setChartConfig] = useState({});\n\n  const getChartConfig = (data: any[]) => {\n    return {\n      dataLabels: {\n        formatter: laptimeToHumanReadable,\n        style: {\n          colors: ['#333'],\n        },\n        offsetX: 10,\n      },\n      plotOptions: {\n        bar: {\n          horizontal: true,\n        },\n        grid: {\n          show: false, // you can either change hear to disable all grids\n          xaxis: {\n            lines: {\n              show: false, //or just here to disable only x axis grids\n            },\n          },\n          yaxis: {\n            lines: {\n              show: false, //or just here to disable only y axis\n            },\n          },\n        },\n      },\n      tooltip: {\n        y: {\n          formatter: laptimeToHumanReadable,\n        },\n      },\n      xaxis: {\n        labels: {\n          formatter: laptimeToHumanReadable,\n        },\n        min: Math.floor(data[0][lap_type] / 10000) * 10000,\n        max:\n          Math.ceil(\n            data.reduce((prev, curr) =>\n              prev[lap_type] > curr[lap_type] ? prev : curr\n            )[lap_type] / 10000\n          ) * 10000,\n        tickAmount: 10,\n      },\n      yaxis: {\n        axisTicks: {\n          show: false,\n        },\n      },\n    };\n  };\n\n  useEffect(() => {\n    if (data.length < 1) return;\n\n    const sortedData = [...data].sort((x, y) =>\n      x[lap_type] < y[lap_type] ? -1 : 1\n    );\n\n    const barData: any[] = [];\n    sortedData.forEach((driver) => {\n      if (driver[lap_type] === null || driver[lap_type] === -1) return;\n      barData.push({\n        x: driver[\"name\"],\n        y: driver[lap_type],\n        // @ts-ignore\n        fillColor: colors[driver[\"class\"]],\n      });\n    });\n    setChartConfig(getChartConfig(data));\n    setBarData([\n      {\n        name: \"Best lap\",\n        data: barData,\n        tooltip: { valueFormatter: laptimeToHumanReadable },\n      },\n    ]);\n  }, [data]);\n\n  return (\n    <div className={styles.RPMLapsBars} data-testid=\"RPMLapsBars\">\n      {data.length > 0 ? (\n        <Chart options={chartConfig} series={barData} type=\"bar\" width=\"100%\" />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default RPMLapsBars;\n","import React, { FC, useEffect, useState } from \"react\";\nimport Chart from \"react-apexcharts\";\n\n// Helpers\nimport { laptimeToHumanReadable } from \"../../helpers/laps\";\n\n// Styles\nimport styles from \"./RPMBoxPlot.module.css\";\n\n// Props\ninterface RPMBoxPlotProps {\n  data: any[];\n}\n\nconst RPMBoxPlot: FC<RPMBoxPlotProps> = ({ data }) => {\n  const [boxPlotData, setBoxPlotData] = useState<any[]>([]);\n  const [chartConfig, setChartConfig] = useState({\n    yaxis: {\n      labels: {\n        formatter: laptimeToHumanReadable,\n      },\n      min: 880000,\n      max: 880000 + 80000,\n      tickAmount: 8,\n    },\n  });\n\n  useEffect(() => {\n    if (data.length < 1) return;\n\n    const sortedData = [...data].sort((x, y) =>\n      x[\"finish_position\"] < y[\"finish_position\"] ? -1 : 1\n    );\n\n    const boxPlotData: any[] = [];\n    sortedData.forEach((driver) => {\n      if (driver[\"best_lap\"] === null) return;\n      boxPlotData.push({\n        x: `${driver[\"finish_position\"] + 1}. ${driver[\"name\"]}`,\n        y: [\n          driver[\"best_lap\"],\n          driver[\"quartile_1_lap\"],\n          driver[\"average_lap\"],\n          driver[\"quartile_3_lap\"],\n          driver[\"worst_lap\"],\n        ],\n      });\n    });\n    setBoxPlotData([{ data: boxPlotData }]);\n\n    chartConfig.yaxis.min = Math.floor(data[0][\"best_lap\"] / 10000) * 10000;\n    chartConfig.yaxis.max = chartConfig.yaxis.min + 80000;\n\n    setChartConfig(chartConfig);\n  }, [data]);\n\n  return (\n    <div className={styles.RPMBoxPlot}>\n      {boxPlotData.length > 0 ? (\n        <Chart\n          options={chartConfig}\n          series={boxPlotData}\n          type=\"boxPlot\"\n          width=\"100%\"\n        />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default RPMBoxPlot;\n","import React, { FC, useEffect, useState } from \"react\";\n\n// Styles\nimport styles from \"./RPMIncidents.module.css\";\nimport Chart from \"react-apexcharts\";\n\n// Props\ninterface RPMIncidentsProps {\n  data: any[];\n}\n\nconst colors = {\n  Gold: \"#fff714\",\n  Silver: \"#eeeeee\",\n  Bronze: \"#ab7d00\",\n};\n\nconst RPMIncidents: FC<RPMIncidentsProps> = ({ data }) => {\n  const incProperty = \"incidents\";\n  const incPerLapProperty = \"incidents_per_lap\";\n  const [barData, setBarData] = useState<any[]>([]);\n  const [chartConfig, setChartConfig] = useState({});\n\n  const series = [\n    {\n      name: \"Website Blog\",\n      type: \"column\",\n      data: data.map((driver) => driver[\"incidents\"]),\n    },\n    {\n      name: \"Social Media\",\n      type: \"line\",\n      data: data.map((driver) => driver[\"incidents_per_lap\"]),\n    },\n  ];\n\n  const cfg = {\n    stroke: {\n      width: [0, 4],\n    },\n    title: {\n      text: \"Traffic Sources\",\n    },\n    dataLabels: {\n      enabled: true,\n      enabledOnSeries: [1],\n    },\n    labels: data.map((driver) => driver[\"name\"]),\n    xaxis: {\n      // type: 'datetime'\n    },\n    yaxis: [\n      {\n        title: {\n          text: \"Website Blog\",\n        },\n      },\n      {\n        opposite: true,\n        title: {\n          text: \"Social Media\",\n        },\n      },\n    ],\n  };\n\n  useEffect(() => {\n    if (data.length < 1) return;\n\n    const sortedData = [...data].sort((x, y) =>\n      x[incProperty] < y[incProperty] ? -1 : 1\n    );\n\n    const barData: any[] = [];\n    sortedData.forEach((driver) => {\n      barData.push({\n        x: driver[\"name\"],\n        y: driver[incProperty],\n        // @ts-ignore\n        // fillColor: colors[driver['class']]\n      });\n    });\n\n    const lineData: any[] = [];\n    sortedData.forEach((driver) => {\n      lineData.push({\n        x: driver[\"name\"],\n        y: driver[incPerLapProperty],\n        // @ts-ignore\n        // fillColor: colors[driver['class']]\n      });\n    });\n\n    setBarData([\n      { type: \"column\", data: barData },\n      { type: \"line\", data: lineData, fillColor: \"#330000\" },\n    ]);\n    console.log([{ type: \"column\", data: barData }]);\n  }, [data]);\n\n  return (\n    <div className={styles.RPMIncidents} data-testid=\"RPMIncidents\">\n      {data.length > 0 ? (\n        <Chart options={cfg} series={series} type=\"line\" width=\"100%\" />\n      ) : (\n        <></>\n      )}\n    </div>\n  );\n};\n\nexport default RPMIncidents;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Box, Tab, Tabs } from \"@mui/material\";\n\n// Styles\nimport styles from \"./RPMRace.module.css\";\n\n// Components\nimport RPMTabPanel from \"../RPMTabPanel/RPMTabPanel\";\nimport RPMResultsGrid from \"../RPMResultsGrid/RPMResultsGrid\";\nimport RPMLapsBars from \"../RPMLapsBars/RPMLapsBars\";\nimport RPMBoxPlot from \"../RPMBoxPlot/RPMBoxPlot\";\nimport RPMIncidents from \"../RPMIncidents/RPMIncidents\";\n\n// Props\ninterface RPMRaceProps {\n    data: any;\n}\n\nconst RPMRace: FC<RPMRaceProps> = ({ data }) => {\n    const [value, setValue] = React.useState(0);\n\n    const handleTabChange = (event: React.SyntheticEvent, newValue: number) => {\n        setValue(newValue);\n    };\n\n    const a11yProps = (index: number) => {\n        return {\n            id: `simple-tab-${index}`,\n            \"aria-controls\": `simple-tabpanel-${index}`,\n        };\n    };\n\n    return (\n        <div className={styles.RPMRace} data-testid=\"RPMRace\">\n            <h2>\n                {data.track_name}\n            </h2>\n            <Box sx={{ width: \"100%\", height: \"100%\" }}>\n                <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n                    <Tabs\n                        value={value}\n                        onChange={handleTabChange}\n                        aria-label=\"Race results tabs\"\n                    >\n                        <Tab label=\"Results\" {...a11yProps(0)} />\n                        <Tab label=\"Qualy laps\" {...a11yProps(1)} />\n                        <Tab label=\"Race laps\" {...a11yProps(2)} />\n                        <Tab label=\"Lap times distribution\" {...a11yProps(3)} />\n                        <Tab label=\"Incidents\" {...a11yProps(4)} />\n                    </Tabs>\n                </Box>\n                <RPMTabPanel value={value} index={0}>\n                    <RPMResultsGrid data={data.drivers_statistics} />\n                </RPMTabPanel>\n                <RPMTabPanel value={value} index={1}>\n                    <RPMLapsBars\n                        data={data.drivers_statistics}\n                        lap_type={\"best_qual_lap_time\"}\n                    />\n                </RPMTabPanel>\n                <RPMTabPanel value={value} index={2}>\n                    <RPMLapsBars data={data.drivers_statistics} />\n                </RPMTabPanel>\n                <RPMTabPanel value={value} index={3}>\n                    <RPMBoxPlot data={data.drivers_statistics} />\n                </RPMTabPanel>\n                <RPMTabPanel value={value} index={4}>\n                    <RPMIncidents data={data.drivers_statistics} />\n                </RPMTabPanel>\n            </Box>\n        </div>\n    );\n};\n\nexport default RPMRace;\n","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport {\n  AppBar,\n  Container,\n  CssBaseline,\n  IconButton,\n  Menu,\n  MenuItem,\n  Toolbar,\n  Typography\n} from \"@mui/material\";\nimport Icon from '@mui/material/Icon';\n\n// Components\nimport RPMRace from \"./components/RPMRace/RPMRace\";\n\nconst App = () => {\n  const [racesData, setRacesData] = useState<any>(null);\n  const [currentRace, setCurrentRace] = useState<any>(null);\n  const [data, setData] = useState<any>(null);\n  const [anchorEl, setAnchorEl] = React.useState<null | HTMLElement>(null);\n  const open = Boolean(anchorEl);\n\n  const handleClick = (event: React.MouseEvent<HTMLElement>) => {\n    setAnchorEl(event.currentTarget);\n  };\n  const handleClose = () => {\n    setAnchorEl(null);\n  };\n\n  const handleMenuClick = (sub: any) => {\n    return () => {\n      setAnchorEl(null);\n      setCurrentRace(sub);\n    }\n  }\n\n  useEffect(() => {\n    axios.get('races.json').then((res) => setRacesData(res.data));\n  }, []);\n\n  useEffect(() => {\n    if (!currentRace) return;\n    axios.get('data_' + currentRace + '.json').then((res) => setData(res.data));\n  }, [currentRace]);\n\n  const getMenu = () => {\n    if (!racesData) return;\n\n    const menuItems: any[] = [];\n    racesData.races.forEach((race: any) => {\n      menuItems.push(<MenuItem onClick={handleMenuClick(race.subsession_id)}>{race.race_num} - {race.name}</MenuItem>);\n    });\n    return menuItems;\n  };\n\n  return (\n    <div className=\"App\">\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <IconButton\n              size=\"large\"\n              edge=\"start\"\n              color=\"inherit\"\n              aria-label=\"menu\"\n              sx={{ mr: 2 }}\n              onClick={handleClick}\n          >\n            <Icon>menu</Icon>\n          </IconButton>\n          <Menu\n              id=\"basic-menu\"\n              anchorEl={anchorEl}\n              open={open}\n              onClose={handleClose}\n              MenuListProps={{\n                'aria-labelledby': 'basic-button',\n              }}\n          >\n            {getMenu()}\n          </Menu>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            RPM European GT3 Series - Season 3\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <Container sx={{ height: \"100%\" }}>\n        {data ? <RPMRace data={data}></RPMRace> : null}\n      </Container>\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\n// Components\nimport App from \"./App\";\n\n// Global styles\nimport \"./index.css\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMRace\":\"RPMRace_RPMRace__3nlLv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMTabPanel\":\"RPMTabPanel_RPMTabPanel__1RPKo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMResultsGrid\":\"RPMResultsGrid_RPMResultsGrid__317WZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMLapsBars\":\"RPMLapsBars_RPMLapsBars__2inxn\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMBoxPlot\":\"RPMBoxPlot_RPMBoxPlot__uN3Ca\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"RPMIncidents\":\"RPMIncidents_RPMIncidents__4P6eV\"};"],"sourceRoot":""}